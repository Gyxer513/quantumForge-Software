import os
import re
import json


def main():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∏–∑ knowledge_base
    –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ terms_map.json (–¥–æ –∑–∞–º–µ–Ω—ã).
    –ï—Å–ª–∏ —Ç–∞–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞–π–¥–µ–Ω—ã ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª–æ–≤.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ç–µ—Ä–º–∏–Ω–æ–≤
    try:
        with open("terms_map.json", "r", encoding="utf-8") as f:
            terms = json.load(f)
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª terms_map.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        return

    originals = list(terms.keys())

    bad = []  # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –≥–¥–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ç–µ—Ä–º–∏–Ω—ã

    kb_dir = "knowledge_base"
    if not os.path.exists(kb_dir):
        print(f"–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ '{kb_dir}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # –û–±—Ö–æ–¥–∏–º –≤—Å–µ .txt —Ñ–∞–π–ª—ã –≤ knowledge_base
    for fn in os.listdir(kb_dir):
        if not fn.endswith(".txt"):
            continue

        path = os.path.join(kb_dir, fn)
        try:
            with open(path, "r", encoding="utf-8") as f:
                txt = f.read()
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {path}: {e}")
            continue

        # –ò—â–µ–º –ª—é–±–æ–π –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∫–∞–∫ —Ü–µ–ª–æ–µ —Å–ª–æ–≤–æ (—Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        found = False
        for k in originals:
            if re.search(
                rf"(?<!\w){re.escape(k)}(?!\w)",
                txt,
                flags=re.IGNORECASE | re.UNICODE
            ):
                bad.append((fn, k))
                found = True
                break  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if bad:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ {len(bad)} —Ñ–∞–π–ª–∞—Ö:")
        for f, k in bad[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 –ø—Ä–∏–º–µ—Ä–æ–≤
            print(f" - {f}: '{k}'")
        if len(bad) > 20:
            print(f" ... –∏ –µ—â—ë {len(bad) - 20} —à—Ç.")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ: –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–æ—Ä–º—ã –≤ terms_map.json "
              "–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ apply_replacements.py —Å–Ω–æ–≤–∞.")
    else:
        print("‚úÖ OK: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—Å–µ –∑–∞–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")


if __name__ == "__main__":
    main()