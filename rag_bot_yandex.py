import os
import re
import random
from glob import glob
from typing import List, Dict, Tuple

import requests
import chromadb
from sentence_transformers import SentenceTransformer
from dotenv import load_dotenv


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PERSIST_DIR = os.path.abspath("chroma_db")
COLLECTION_NAME = "terraria_kb"
KB_DIR = "knowledge_base"

# üîó –ê–∫—Ç—É–∞–ª—å–Ω—ã–π endpoint –¥–ª—è YandexGPT (2025)
YANDEX_ENDPOINT = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"


def parse_header_body(text: str) -> Tuple[Dict[str, str], str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —à–∞–ø–∫—É (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ) –∏ —Ç–µ–ª–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Ç–µ–∫—Å—Ç.
    """
    parts = re.split(r"\n---\n\n", text, maxsplit=1)
    header, body = (parts[0], parts[1]) if len(parts) == 2 else (None, text)
    meta = {}
    if header:
        for line in header.splitlines():
            if ":" in line:
                k, v = line.split(":", 1)
                meta[k.strip()] = v.strip()
    return meta, body


def few_shots_from_kb(kb_dir: str = KB_DIR, n: int = 2) -> List[Tuple[str, str]]:
    """
    –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç n —Ñ–∞–π–ª–æ–≤ –∏–∑ knowledge_base –∏ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–º–µ—Ä—ã Q/A.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ few-shot –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ–º–ø—Ç–µ.
    """
    files = sorted(glob(os.path.join(kb_dir, "*.txt")))
    shots = []
    if not files:
        return shots
    picks = random.sample(files, k=min(n, len(files)))
    for path in picks:
        try:
            with open(path, encoding="utf-8") as f:
                txt = f.read()
        except Exception as e:
            print(f"[WARN] –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª –¥–ª—è few-shot: {path} ‚Äî {e}")
            continue
        meta, body = parse_header_body(txt)
        title = meta.get("Title", os.path.basename(path).rsplit(".", 1)[0])
        sentences = re.split(r"(?<=[.!?])\s+", body.strip())
        answer_text = " ".join(sentences[:2]).strip()[:600]
        question = f"–ö—Ç–æ –∏–ª–∏ —á—Ç–æ —Ç–∞–∫–æ–µ ¬´{title}¬ª?"
        answer = (
            f"{answer_text}\n\n"
            "–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
            f"- {meta.get('Title', title)} ‚Äî {meta.get('Source', '')}"
        )
        shots.append((question, answer))
    return shots


def format_context(hits: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏ [CTX1], [CTX2]...
    """
    lines = []
    docs = hits["documents"][0]
    metadatas = hits["metadatas"][0]
    for i, (doc, meta) in enumerate(zip(docs, metadatas), start=1):
        title = meta.get("title", "Unknown")
        source = meta.get("source", "")
        lines.append(
            f"[CTX{i}] Title: {title}\n"
            f"Source: {source}\n"
            f"Excerpt:\n{doc}\n"
        )
    return "\n".join(lines)


def init_embedder() -> SentenceTransformer:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å BAAI/bge-m3 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.
    """
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ BAAI/bge-m3...")
    return SentenceTransformer("BAAI/bge-m3", trust_remote_code=True)


def init_vector_store():
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π ChromaDB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é.
    """
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    client = chromadb.PersistentClient(path=PERSIST_DIR)
    try:
        return client.get_collection(COLLECTION_NAME)
    except ValueError:
        raise RuntimeError(
            f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{COLLECTION_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ build_index.py."
        )


def init_llm_yandex():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é chat() –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ YandexGPT —á–µ—Ä–µ–∑ REST API.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ API-–∫–ª—é—á –∏–ª–∏ IAM-—Ç–æ–∫–µ–Ω.
    """
    load_dotenv()

    folder_id = os.getenv("YANDEX_FOLDER_ID")
    api_key = os.getenv("YANDEX_API_KEY")
    iam_token = os.getenv("YANDEX_IAM_TOKEN")
    model_name = os.getenv("YANDEX_MODEL", "yandexgpt-lite")

    if not folder_id:
        raise RuntimeError("YANDEX_FOLDER_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    if not (api_key or iam_token):
        raise RuntimeError("–¢—Ä–µ–±—É–µ—Ç—Å—è YANDEX_API_KEY –∏–ª–∏ YANDEX_IAM_TOKEN")

    # üõ† –§–æ—Ä–º–∞—Ç modelUri: gpt://{folder_id}/{model}
    model_uri = f"gpt://{folder_id}/{model_name}"

    # üîê –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {api_key}" if api_key else f"Bearer {iam_token}",
    }

    def chat(messages: List[Dict[str, str]], temperature: float = 0.2, max_tokens: int = 800) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ YandexGPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
        """
        payload = {
            "modelUri": model_uri,
            "completionOptions": {
                "temperature": temperature,
                "maxTokens": str(max_tokens),
                "stream": False,
            },
            "messages": messages,
        }

        try:
            response = requests.post(
                YANDEX_ENDPOINT,
                headers=headers,
                json=payload,
                timeout=90
            )
            response.raise_for_status()
            data = response.json()

            # ‚úÖ –ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç—É –≤ –æ—Ç–≤–µ—Ç–µ
            return data["result"]["alternatives"][0]["message"]["text"].strip()

        except requests.exceptions.HTTPError as e:
            status = response.status_code
            error_text = response.text
            if status == 401:
                print("[–û–®–ò–ë–ö–ê 401] –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å YANDEX_API_KEY –∏–ª–∏ YANDEX_IAM_TOKEN")
                print("  ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ YandexGPT")
            elif status == 403:
                print("[–û–®–ò–ë–ö–ê 403] –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω:")
                print("  ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–ª–∞—Ç—ë–∂–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É")
                print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å 'ai.languageModels.user'")
            return f"[HTTP {status}] –û—à–∏–±–∫–∞: {error_text}"

        except requests.exceptions.RequestException as e:
            return f"[–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞] {e}"

        except KeyError:
            return f"[–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API:\n{response.text}"

        except Exception as e:
            return f"[–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞] {e}"

    return chat


def build_messages(question: str, context_block: str, fewshots: List[Tuple[str, str]]) -> List[Dict[str, str]]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, few-shot –ø—Ä–∏–º–µ—Ä—ã –∏ –≤–æ–ø—Ä–æ—Å.
    """
    system_prompt = (
        "–¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ —Å–≤–µ–¥–µ–Ω–∏–π –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º. "
        "–î—É–º–∞–π –ø–æ—à–∞–≥–æ–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ, –Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ –¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ. "
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "- –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (2‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π).\n"
        "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: 1‚Äì3 –ø—É–Ω–∫—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n"
        "- –ò—Å—Ç–æ—á–Ω–∏–∫–∏: Title + URL."
    )

    examples_text = ""
    if fewshots:
        parts = []
        for i, (q, a) in enumerate(fewshots, 1):
            parts.append(f"–ü—Ä–∏–º–µ—Ä {i}\nQ: {q}\nA: {a}")
        examples_text = "\n\n".join(parts)

    user_prompt = (
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç (–∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã):\n{context_block}\n\n"
        f"{examples_text}\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\nQ: {question}\nA:"
    )

    return [
        {"role": "system", "text": system_prompt},
        {"role": "user", "text": user_prompt},
    ]


def answer_loop():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ ‚Üí –ø–æ–∏—Å–∫ ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Üí –≤—ã–≤–æ–¥.
    """
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    embedder = init_embedder()

    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î...")
    col = init_vector_store()

    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ YandexGPT...")
    chat = init_llm_yandex()

    print("\nRAG-–±–æ—Ç (YandexGPT) –≥–æ—Ç–æ–≤. –ü–∏—à–∏ –≤–æ–ø—Ä–æ—Å (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –≤—ã—Ö–æ–¥).")
    while True:
        try:
            user_input = input("> ").strip()
            if not user_input:
                print("–í—ã—Ö–æ–¥.")
                break

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = embedder.encode([user_input], normalize_embeddings=True)[0].tolist()

            # –ü–æ–∏—Å–∫ –≤ Chroma
            results = col.query(
                query_embeddings=[query_embedding],
                n_results=5,
                include=["metadatas", "documents", "distances"],
            )

            if not results["documents"] or not results["documents"][0]:
                print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –£—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.\n" + "-" * 60)
                continue

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context_block = format_context(results)

            # Few-shot –ø—Ä–∏–º–µ—Ä—ã
            fewshot_examples = few_shots_from_kb(KB_DIR, n=2)

            # –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = build_messages(user_input, context_block, fewshot_examples)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            answer = chat(messages, temperature=0.2, max_tokens=700)

            # –í—ã–≤–æ–¥
            print("\n" + answer.strip() + "\n" + "-" * 60)

        except KeyboardInterrupt:
            print("\n\n–í—ã—Ö–æ–¥ –ø–æ Ctrl+C.")
            break
        except Exception as e:
            print(f"\n[–û—à–∏–±–∫–∞]: {e}\n" + "-" * 60)


if __name__ == "__main__":
    answer_loop()